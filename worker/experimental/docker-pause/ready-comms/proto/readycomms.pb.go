// Code generated by protoc-gen-go.
// source: readycomms.proto
// DO NOT EDIT!

/*
Package readycomms is a generated protocol buffer package.

It is generated from these files:
	readycomms.proto

It has these top-level messages:
	ReadyRequest
	ReadyReply
*/
package readycomms

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

// The message
type ReadyRequest struct {
	Id string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
}

func (m *ReadyRequest) Reset()                    { *m = ReadyRequest{} }
func (m *ReadyRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadyRequest) ProtoMessage()               {}
func (*ReadyRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// The response message containing the greetings
type ReadyReply struct {
}

func (m *ReadyReply) Reset()                    { *m = ReadyReply{} }
func (m *ReadyReply) String() string            { return proto.CompactTextString(m) }
func (*ReadyReply) ProtoMessage()               {}
func (*ReadyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*ReadyRequest)(nil), "ReadyRequest")
	proto.RegisterType((*ReadyReply)(nil), "ReadyReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for Ready service

type ReadyClient interface {
	// Sends a greeting
	SayReady(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyReply, error)
}

type readyClient struct {
	cc *grpc.ClientConn
}

func NewReadyClient(cc *grpc.ClientConn) ReadyClient {
	return &readyClient{cc}
}

func (c *readyClient) SayReady(ctx context.Context, in *ReadyRequest, opts ...grpc.CallOption) (*ReadyReply, error) {
	out := new(ReadyReply)
	err := grpc.Invoke(ctx, "/Ready/SayReady", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ready service

type ReadyServer interface {
	// Sends a greeting
	SayReady(context.Context, *ReadyRequest) (*ReadyReply, error)
}

func RegisterReadyServer(s *grpc.Server, srv ReadyServer) {
	s.RegisterService(&_Ready_serviceDesc, srv)
}

func _Ready_SayReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ReadyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(ReadyServer).SayReady(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Ready_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Ready",
	HandlerType: (*ReadyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayReady",
			Handler:    _Ready_SayReady_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

var fileDescriptor0 = []byte{
	// 110 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4a, 0x4d, 0x4c,
	0xa9, 0x4c, 0xce, 0xcf, 0xcd, 0x2d, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x92, 0xe3, 0xe2,
	0x09, 0x02, 0x89, 0x05, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0xf1, 0x71, 0x31, 0x65, 0xa6,
	0x48, 0x30, 0x29, 0x30, 0x6a, 0x70, 0x06, 0x01, 0x59, 0x4a, 0x3c, 0x5c, 0x5c, 0x50, 0xf9, 0x82,
	0x9c, 0x4a, 0x23, 0x43, 0x2e, 0x56, 0x30, 0x4f, 0x48, 0x83, 0x8b, 0x23, 0x38, 0xb1, 0x12, 0xc2,
	0xe6, 0xd5, 0x43, 0x36, 0x41, 0x8a, 0x5b, 0x0f, 0xa1, 0x41, 0x89, 0x21, 0x89, 0x0d, 0x6c, 0x8f,
	0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x1f, 0x20, 0xa3, 0x7b, 0x00, 0x00, 0x00,
}
